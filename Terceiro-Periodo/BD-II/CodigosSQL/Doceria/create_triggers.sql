-- QUANDO CRIA AVALIAÇÃO
--- FUNÇÃO
CREATE OR REPLACE FUNCTION VALIDA_AVALIACAO()
RETURNS TRIGGER AS $$
BEGIN
	IF NOT NEW.NOTA BETWEEN 0 AND 10
		THEN RAISE EXCEPTION 'NOTA DE AVALIAÇÃO DEVE SER UM VALOR ENTRE 0 E 10';
	END IF;

	IF (NEW.COD_CLIENTE <> (SELECT COD_CLIENTE FROM PEDIDO WHERE COD_PEDIDO=NEW.COD_PEDIDO))
		THEN RAISE EXCEPTION 'CLIENTE SÓ PODE FAZER AVALIAÇÃO EM UM PEDIDO QUE ELE FEZ';
	END IF;

	RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

--- TRIGGER
CREATE TRIGGER TG_AVALIACAO_BEFORE_INSERT_UPDATE
BEFORE INSERT OR UPDATE
ON AVALIACAO
FOR EACH ROW
EXECUTE FUNCTION VALIDA_AVALIACAO();

-- QUANDO CRIA CUPOM
--- FUNCAO
CREATE OR REPLACE FUNCTION VALIDA_CUPOM()
RETURNS TRIGGER AS $$
BEGIN
	IF NOT NEW.DESCONTO BETWEEN 0 AND 100
		THEN RAISE EXCEPTION 'DESCONTO DEVE SER UM VALOR ENTRE 0 E 100';
	END IF;

	RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

--- TRIGGER
CREATE OR REPLACE TRIGGER TG_CUPOM_BEFORE_INSERT_UPDATE
BEFORE INSERT OR UPDATE
ON CUPOM
FOR EACH ROW
EXECUTE FUNCTION VALIDA_CUPOM();

-- QUAND USA CUPOM
--- FUNCAO
CREATE OR REPLACE FUNCTION VALIDA_USO_CUPOM()
RETURNS TRIGGER AS $$
BEGIN
	IF ((SELECT USOS_RESTANTES FROM CUPOM WHERE COD_CUPOM = NEW.COD_CUPOM) = 0)
		THEN RAISE EX
SELECT * FROM PEDIDOCEPTION 'USO DO CUPOM % CHEGOU A ZERO E NÃO PODE SER MAIS USADO', NEW.COD_CUPOM;
	END IF;

	UPDATE CUPOM SET USOS_RESTANTES = USOS_RESTANTES - 1 WHERE COD_CUPOM=NEW.COD_CUPOM;
	UPDATE PEDIDO SET VALOR_FINAL = VALOR_TOTAL WHERE COD_PEDIDO=NEW.COD_PEDIDO;

	RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

--- TRIGGER
CREATE OR REPLACE TRIGGER TG_BEFORE_INSERT_UPDATE_PEDIDO
BEFORE INSERT OR UPDATE
ON PEDIDO
FOR EACH ROW
EXECUTE FUNCTION VALIDA_USO_CUPOM();


-- DELETA CUPOM
--- FUNCAO
CREATE OR REPLACE FUNCTION ATUALIZA_VALOR_FINAL_PEDIDO()
RETURNS TRIGGER AS $$
BEGIN
	UPDATE PEDIDO SET VALOR_FINAL = VALOR_TOTAL WHERE COD_CUPOM=OLD.COD_CUPOM;
	UPDATE PEDIDO SET COD_CUPOM = NULL WHERE COD_CUPOM=OLD.COD_CUPOM;

	RETURN NULL;
END
$$ LANGUAGE PLPGSQL;

--- TRIGGER
CREATE OR REPLACE TRIGGER TG_CUPOM_BEFORE_DELETE
BEFORE DELETE
ON CUPOM
FOR EACH ROW
EXECUTE FUNCTION ATUALIZA_VALOR_FINAL_PEDIDO();

-- QUANDO CRIA ITEM
--- FUNCAO
CREATE OR REPLACE FUNCTION ATUALIZA_PRODUTO()
RETURNS TRIGGER AS $$
BEGIN
	IF ((SELECT ESTOQUE FROM PRODUTO WHERE COD_PRODUTO=NEW.COD_PRODUTO) < NEW.QUANTIDADE)
		THEN RAISE EXCEPTION 'PRODUTO % ESTÁ FORA DE ESTOQUE', NEW.COD_PRODUTO;
	END IF;

	UPDATE PEDIDO SET VALOR_TOTAL = VALOR_TOTAL + (NEW.QUANTIDADE * (SELECT PRECO_UNIT FROM PRODUTO WHERE COD_PRODUTO = NEW.COD_PRODUTO))
		WHERE COD_PEDIDO = NEW.COD_PEDIDO;
	UPDATE PEDIDO SET VALOR_FINAL = VALOR_TOTAL * (SELECT DESCONTO FROM CUPOM WHERE COD_CUPOM = NEW.COD_CUPOM)
		WHERE COD_PEDIDO = NEW.COD_PEDIDO;
	UPDATE PRODUTO SET ESTOQUE = ESTOQUE - QUANTIDADE WHERE COD_PRODUTO=NEW.COD_PRODUTO;
END
$$ LANGUAGE PLPGSQL;

--- TRIGGER
CREATE OR REPLACE TRIGGER TG_ITEM_BEFORE_INSERT_UPDATE
BEFORE INSERT OR UPDATE
ON ITEM
FOR EACH ROW
EXECUTE FUNCTION ATUALIZA_PRODUTO();
















